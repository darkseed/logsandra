Logsandra
=========
Logsandra is a log management application written in Python and using Cassandra as back-end.


Requirements
------------
Cassandra 0.7, Python 2.6/2.7 (not tested with Python 3.x yet) and the following Python modules:

    * Pylons >= 1.0
    * Jinja2
    * PyYAML
    * Pycassa
    * python-dateutil
    * CherryPy >= 3.1
    * Thrift
    * ordereddict
    * Cassandra
    * virtualenv (Optional, but recommended)


Installation
------------
To install Logsandra it is recommended that you setup a virtual python environment using the python module virtualenv. A few simple steps:

    $ virtualenv --no-site-packages logsandra_env
    $ cd logsandra_env
    $ source logsandra_env/bin/activate
    $ easy_install Pylons Jinja2 PyYAML Pycassa python-dateutil CherryPy Thrift ordereddict
    $ 'setup cassandra bindings for python'
    $ git clone git://github.com/jbohman/logsandra.git
    $ cd logsandra
    $ python scripts/create_keyspace.py

Done! Logsandra should now be ready, continue to the Configuration headline.


It is also possible to install Logsandra as an egg in your site-packages directory, it is not yet recommended but if you know what you are doing, try:

    $ python setup.py install

All Python modules will be automatically installed by that command except for the Cassandra bindings.


Configuration
-------------
The main configuration file for Logsandra is logsandra.yaml, the format is yaml. Below is a list of configuration variables (including type and optional/required):

    ident               identity of the logsandra server [String, Optional/Discovery]

    httpd_host          host on which to serve the logsandra web service [String, Required]
    httpd_port          port on which to serve the logsandra web service [String, Required]
    httpd_config        name of the pylons configuration file [String]

    cassandra_host      cassandra host to connect too [String, Required]
    cassandra_port      cassandra port to connect too [String, Required]
    cassandra_timeout   in seconds until connection is aborted if no response is delivered [String, Optional]

    paths               list of paths to monitor [List, Optional]
      path              directory or file [String, Required]
      recursive         recursively enter sub directories [True/False, Optional]
      parser            dictionary containing parser name and arguments [Dictionary, Required]
        name            name of the parser [String, Required]
        ...             arguments, see specific parser [Depends, Optional]

Logsandra is built on Pylons and therefore a Pylons configuration file should be present for Logsandras web service to work.


Usage
-----
Logsandra consists of two daemon applications, below is the usage pattern:

    $ python logsandra-httpd.py [options] start|stop|restart
    $ python logsandra-monitord.py [options] start|stop|restart

If you want a list of options invoke either one these commands:

    $ python logsandra-httpd.py --help
    $ python logsandra-monitord.py --help

An example setup is to run logsandra-httpd on one server and logsandra-monitord on all servers producing log files. Logsandra-monitord will send the data to the specified Cassandra Cluster in logsandra.yaml. 


Create your own parser
----------------------
To create your own Logsandra parser you need to create a python file in this directory (either in site-packages or where you downloaded Logsandra):

    logsandra/monitor/parsers/

The name of the file should be in lower case and end with '.py', an example of a files content (the filename is foo.py):

    from logsandra.monitor.parsers import BaseParser

    class FooParser(BaseParser):
        def parse(self, line, source, data):
            date = None
            keywords = []
            return self.log_entries.add(date=date, entry=line, source=source, keywords=keywords)

The first line imports the BaseParser class, it contains common methods for all parsers. Now comes a class definition, note the name of the class which is the same
as the filename but capitali

A better example is to study how existing parsers work in logsandra/monitor/parsers/ directory. 
